<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">

        <!-- Template para Odoo 13 -->
        <record id="docker_compose_template_odoo13" model="docker.compose.template">
            <field name="name">Retail Light</field>
            <field name="sequence">10</field>
            <field name="active">True</field>
            <field name="template_dc_body"><![CDATA[

services:
  {{INSTANCE-NAME}}_db:
    image: ettaet/retail_light_db_v1:{{POSTGRES-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_db
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - POSTGRES_DB=postgres
    restart: always
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 1G
    volumes:
      - {{INSTANCE-NAME}}_db_data:/var/lib/postgresql/data
    networks:
      - {{INSTANCE-NAME}}_backend

  {{INSTANCE-NAME}}_odoo17:
    image: ettaet/retail_light_odoo_v1:{{ODOO-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_odoo
    depends_on:
      - {{INSTANCE-NAME}}_db
    ports:
      - "{{HTTP-PORT}}:8069"
      - "{{LONGPOLLING-PORT}}:8072"
    cap_add:
      - NET_ADMIN   # Add this to allow network control
      - NET_RAW
    command: >
      sh -c "
      echo 'Setting up bandwidth limit...' &&
      tc qdisc add dev eth0 root tbf rate {{NETWORK-LIMIT}}mbit burst 32kbit latency 400ms &&
      exec /entrypoint.sh odoo
      "
    environment:
      - HOST={{INSTANCE-NAME}}_db
      - USER=odoo
      - PASSWORD=odoo
    restart: always
    deploy:
      resources:
        limits:
          cpus: '{{CPU-LIMIT}}'
          memory: {{MEMORY-LIMIT}}G
    volumes:
      - {{INSTANCE-NAME}}_odoo_data:/var/lib/odoo
    networks:
      - {{INSTANCE-NAME}}_backend

volumes:
  {{INSTANCE-NAME}}_db_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/db
      o: bind
  {{INSTANCE-NAME}}_odoo_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/odoo
      o: bind

networks:
  {{INSTANCE-NAME}}_backend:
    driver: bridge
      
]]></field>
            <field name="variable_ids" eval="[
            (5, 0, 0),
            (0, 0, {
                'name': '{{POSTGRES-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{ODOO-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{HTTP-PORT}}',
                'demo_value': '8069',
            }),
            (0, 0, {
                'name': '{{LONGPOLLING-PORT}}',
                'demo_value': '8072',
            }),
            (0, 0, {
                'name': '{{CPU-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{MEMORY-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{NETWORK-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{INSTANCE-NAME}}',
                'demo_value': 'default',
            }),
            (0, 0, {
                'name': '{{STORAGE-LIMIT}}',
                'demo_value': '10',
            }),

            
        ]"/>
        </record>

        <record id="docker_compose_template_odoo12" model="docker.compose.template">
            <field name="name">Restuarant Light Theme</field>
            <field name="sequence">19</field>
            <field name="active">True</field>
            <field name="template_dc_body"><![CDATA[

services:
  {{INSTANCE-NAME}}_db:
    image: ettaet/web_restaurant_light_theme_db_v1:{{POSTGRES-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_db
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - POSTGRES_DB=postgres
    restart: always
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 1G
    volumes:
      - {{INSTANCE-NAME}}_db_data:/var/lib/postgresql/data
    networks:
      - {{INSTANCE-NAME}}_backend

  {{INSTANCE-NAME}}_odoo17:
    image: ettaet/web_restaurant_light_theme_odoo_v1:{{ODOO-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_odoo
    depends_on:
      - {{INSTANCE-NAME}}_db
    ports:
      - "{{HTTP-PORT}}:8069"
      - "{{LONGPOLLING-PORT}}:8072"
    cap_add:
      - NET_ADMIN   # Add this to allow network control
      - NET_RAW
    command: >
      sh -c "
      echo 'Setting up bandwidth limit...' &&
      tc qdisc add dev eth0 root tbf rate {{NETWORK-LIMIT}}mbit burst 32kbit latency 400ms &&
      exec /entrypoint.sh odoo
      "
    environment:
      - HOST={{INSTANCE-NAME}}_db
      - USER=odoo
      - PASSWORD=odoo
    restart: always
    deploy:
      resources:
        limits:
          cpus: '{{CPU-LIMIT}}'
          memory: {{MEMORY-LIMIT}}G
    volumes:
      - {{INSTANCE-NAME}}_odoo_data:/var/lib/odoo
    networks:
      - {{INSTANCE-NAME}}_backend

volumes:
  {{INSTANCE-NAME}}_db_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/db
      o: bind
  {{INSTANCE-NAME}}_odoo_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/odoo
      o: bind

networks:
  {{INSTANCE-NAME}}_backend:
    driver: bridge
      
]]></field>
            <field name="variable_ids" eval="[
            (5, 0, 0),
            (0, 0, {
                'name': '{{POSTGRES-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{ODOO-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{HTTP-PORT}}',
                'demo_value': '8069',
            }),
            (0, 0, {
                'name': '{{LONGPOLLING-PORT}}',
                'demo_value': '8072',
            }),
            (0, 0, {
                'name': '{{CPU-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{MEMORY-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{NETWORK-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{INSTANCE-NAME}}',
                'demo_value': 'default',
            }),
            (0, 0, {
                'name': '{{STORAGE-LIMIT}}',
                'demo_value': '10',
            }),

            
        ]"/>
        </record>

        <!-- Template para Odoo 14 -->
        <record id="docker_compose_template_odoo14" model="docker.compose.template">
            <field name="name">Retail Standard</field>
            <field name="sequence">20</field>
            <field name="active">True</field>
            <field name="template_dc_body"><![CDATA[

services:
  {{INSTANCE-NAME}}_db:
    image: ettaet/retail_standard_db_v1:{{POSTGRES-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_db
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - POSTGRES_DB=postgres
    restart: always
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 1G
    volumes:
      - {{INSTANCE-NAME}}_db_data:/var/lib/postgresql/data
    networks:
      - {{INSTANCE-NAME}}_backend

  {{INSTANCE-NAME}}_odoo17:
    image: ettaet/retail_standard_odoo_v1:{{ODOO-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_odoo
    depends_on:
      - {{INSTANCE-NAME}}_db
    ports:
      - "{{HTTP-PORT}}:8069"
      - "{{LONGPOLLING-PORT}}:8072"
    cap_add:
      - NET_ADMIN   # Add this to allow network control
      - NET_RAW
    command: >
      sh -c "
      echo 'Setting up bandwidth limit...' &&
      tc qdisc add dev eth0 root tbf rate {{NETWORK-LIMIT}}mbit burst 32kbit latency 400ms &&
      exec /entrypoint.sh odoo
      "
    environment:
      - HOST={{INSTANCE-NAME}}_db
      - USER=odoo
      - PASSWORD=odoo
    restart: always
    deploy:
      resources:
        limits:
          cpus: '{{CPU-LIMIT}}'
          memory: {{MEMORY-LIMIT}}G
    volumes:
      - {{INSTANCE-NAME}}_odoo_data:/var/lib/odoo
    networks:
      - {{INSTANCE-NAME}}_backend

volumes:
  {{INSTANCE-NAME}}_db_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/db
      o: bind
  {{INSTANCE-NAME}}_odoo_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/odoo
      o: bind

networks:
  {{INSTANCE-NAME}}_backend:
    driver: bridge
      
]]></field>
            <field name="variable_ids" eval="[
            (5, 0, 0),
            (0, 0, {
                'name': '{{POSTGRES-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{ODOO-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{HTTP-PORT}}',
                'demo_value': '8069',
            }),
            (0, 0, {
                'name': '{{LONGPOLLING-PORT}}',
                'demo_value': '8072',
            }),
            (0, 0, {
                'name': '{{CPU-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{MEMORY-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{NETWORK-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{INSTANCE-NAME}}',
                'demo_value': 'default',
            }),
            (0, 0, {
                'name': '{{STORAGE-LIMIT}}',
                'demo_value': '10',
            }),

            
        ]"/>
        </record>

        <!-- Template para Odoo 15 -->
        <record id="docker_compose_template_odoo15" model="docker.compose.template">
            <field name="name">Restaurant Light</field>
            <field name="sequence">30</field>
            <field name="active">True</field>
            <field name="template_dc_body"><![CDATA[

services:
  {{INSTANCE-NAME}}_db:
    image: ettaet/restaurant_light_db_v1:{{POSTGRES-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_db
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - POSTGRES_DB=postgres
    restart: always
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 1G
    volumes:
      - {{INSTANCE-NAME}}_db_data:/var/lib/postgresql/data
    networks:
      - {{INSTANCE-NAME}}_backend

  {{INSTANCE-NAME}}_odoo17:
    image: ettaet/restaurant_light_odoo_v1:{{ODOO-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_odoo
    depends_on:
      - {{INSTANCE-NAME}}_db
    ports:
      - "{{HTTP-PORT}}:8069"
      - "{{LONGPOLLING-PORT}}:8072"
    cap_add:
      - NET_ADMIN   # Add this to allow network control
      - NET_RAW
    command: >
      sh -c "
      echo 'Setting up bandwidth limit...' &&
      tc qdisc add dev eth0 root tbf rate {{NETWORK-LIMIT}}mbit burst 32kbit latency 400ms &&
      exec /entrypoint.sh odoo
      "
    environment:
      - HOST={{INSTANCE-NAME}}_db
      - USER=odoo
      - PASSWORD=odoo
    restart: always
    deploy:
      resources:
        limits:
          cpus: '{{CPU-LIMIT}}'
          memory: {{MEMORY-LIMIT}}G
    volumes:
      - {{INSTANCE-NAME}}_odoo_data:/var/lib/odoo
    networks:
      - {{INSTANCE-NAME}}_backend

volumes:
  {{INSTANCE-NAME}}_db_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/db
      o: bind
  {{INSTANCE-NAME}}_odoo_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/odoo
      o: bind

networks:
  {{INSTANCE-NAME}}_backend:
    driver: bridge
      
]]></field>
            <field name="variable_ids" eval="[
            (5, 0, 0),
            (0, 0, {
                'name': '{{POSTGRES-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{ODOO-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{HTTP-PORT}}',
                'demo_value': '8069',
            }),
            (0, 0, {
                'name': '{{LONGPOLLING-PORT}}',
                'demo_value': '8072',
            }),
            (0, 0, {
                'name': '{{CPU-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{MEMORY-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{NETWORK-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{INSTANCE-NAME}}',
                'demo_value': 'default',
            }),
            (0, 0, {
                'name': '{{STORAGE-LIMIT}}',
                'demo_value': '10',
            }),

            
        ]"/>
        </record>



        <!-- Template para Odoo 17 -->
        <record id="docker_compose_template_odoo17" model="docker.compose.template">
            <field name="name">Restaurant Standard</field>
            <field name="sequence">35</field>
            <field name="active">True</field>
            <field name="template_dc_body"><![CDATA[

services:
  {{INSTANCE-NAME}}_db:
    image: ettaet/restaurant_standard_db_v1:{{POSTGRES-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_db
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - POSTGRES_DB=postgres
    restart: always
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 1G
    volumes:
      - {{INSTANCE-NAME}}_db_data:/var/lib/postgresql/data
    networks:
      - {{INSTANCE-NAME}}_backend

  {{INSTANCE-NAME}}_odoo17:
    image: ettaet/restaurant_standard_odoo_v1:{{ODOO-VERSION}}
    user: root
    container_name: {{INSTANCE-NAME}}_odoo
    depends_on:
      - {{INSTANCE-NAME}}_db
    ports:
      - "{{HTTP-PORT}}:8069"
      - "{{LONGPOLLING-PORT}}:8072"
    cap_add:
      - NET_ADMIN   # Add this to allow network control
      - NET_RAW
    command: >
      sh -c "
      echo 'Setting up bandwidth limit...' &&
      tc qdisc add dev eth0 root tbf rate {{NETWORK-LIMIT}}mbit burst 32kbit latency 400ms &&
      exec /entrypoint.sh odoo
      "
    environment:
      - HOST={{INSTANCE-NAME}}_db
      - USER=odoo
      - PASSWORD=odoo
    restart: always
    deploy:
      resources:
        limits:
          cpus: '{{CPU-LIMIT}}'
          memory: {{MEMORY-LIMIT}}G
    volumes:
      - {{INSTANCE-NAME}}_odoo_data:/var/lib/odoo
    networks:
      - {{INSTANCE-NAME}}_backend

volumes:
  {{INSTANCE-NAME}}_db_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/db
      o: bind
  {{INSTANCE-NAME}}_odoo_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/micro_saas/{{INSTANCE-NAME}}/odoo
      o: bind

networks:
  {{INSTANCE-NAME}}_backend:
    driver: bridge
      
]]></field>
            <field name="variable_ids" eval="[
            (5, 0, 0),
            (0, 0, {
                'name': '{{POSTGRES-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{ODOO-VERSION}}',
                'demo_value': 'latest',
            }),
            (0, 0, {
                'name': '{{HTTP-PORT}}',
                'demo_value': '8069',
            }),
            (0, 0, {
                'name': '{{LONGPOLLING-PORT}}',
                'demo_value': '8072',
            }),
            (0, 0, {
                'name': '{{CPU-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{MEMORY-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{NETWORK-LIMIT}}',
                'demo_value': '2',
            }),
            (0, 0, {
                'name': '{{INSTANCE-NAME}}',
                'demo_value': 'default',
            }),
            (0, 0, {
                'name': '{{STORAGE-LIMIT}}',
                'demo_value': '10',
            }),

            
        ]"/>
        </record>

    </data>
</odoo>
